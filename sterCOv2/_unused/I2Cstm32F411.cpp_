/*
 * I2Cstm32F411.cpp
 *
 *  Created on: 19 lis 2017
 *      Author: lechu
 */

#include <I2Cstm32F411.h>
#include "stm32f4xx.h"

I2C_stm32F411::I2C_stm32F411() {
	// TODO Auto-generated constructor stub

}

//I2C_stm32F411::~I2C_stm32F411() {
//	// TODO Auto-generated destructor stub
//}



// ****************************************************************






//HAL_I2C_Master_Transmit()
//bool Hardware::i2cInit(){
//	if (HAL_StatusTypeDef::HAL_OK == HAL_I2C_Init(i2c)) return false;
//	return true;
//}


//void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c){
//	i2c_Ongoing = false;
//}

bool I2C_stm32F411::init(){
	/**I2C1 GPIO Configuration
PB6     ------> I2C1_SCL
PB7     ------> I2C1_SDA
	 */
	{ // GPIO setup
		gpioSCL.setup(Gpio::GpioMode::ALTERNATE, Gpio::GpioOType::OpenDrain, Gpio::GpioPuPd::PullUp, Gpio::GpioSpeed::MaximumSpeed);
		gpioSDA.setup(Gpio::GpioMode::ALTERNATE, Gpio::GpioOType::OpenDrain, Gpio::GpioPuPd::PullUp, Gpio::GpioSpeed::MaximumSpeed);
		gpioSCL.setAlternateFunc(0x04); //AF04 - );
		gpioSDA.setAlternateFunc(0x04); //AF04 - );
		gpioLcdReset.setup(Gpio::GpioMode::OUTPUT, Gpio::GpioOType::PushPull, Gpio::GpioPuPd::NoPull, Gpio::GpioSpeed::LowSpeed);
		gpioLcdReset.pinSet(true);

	}


	i2c->CR1 &= ~I2C_CR1_PE;
	while(i2c->CR1 & I2C_CR1_PE){;}	// odczekanie na koniec resetu I2C


	NVIC_SetPriority(IRQn_Type::I2C1_EV_IRQn, NVIC_EncodePriority(nvicPriority, 0,0));
	NVIC_EnableIRQ(IRQn_Type::I2C1_EV_IRQn);

	NVIC_SetPriority(IRQn_Type::I2C1_ER_IRQn, NVIC_EncodePriority(nvicPriority, 0,0));
	NVIC_EnableIRQ(IRQn_Type::I2C1_ER_IRQn);

	uint32_t APBClock = SystemCoreClock;
	uint32_t APB_CLOCKMhz = (APBClock /1000000u) & 0b0111111;
	//APB_CLOCKMhz = (i2c->CR2 & 0b0111111) | APB_CLOCKMhz;

	i2c->CR2 = APB_CLOCKMhz;
	//uint16_t((APB_CLOCKMhz | I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN) & 0x0001111100111111);		// 8 dla 8MHz, 25 dla 25MHz
	i2c->TRISE = 1 + APB_CLOCKMhz; //0x09;	dla 8MHz, 33 dla 32MHz
	i2c->CCR = 160;//(APB_CLOCKMhz * 2000)/(I2C_CLK_FREQ_kHz);  //160;	//40  ;			// 100kHz
	// (((((__PCLK__)/((__SPEED__) << 1U)) & I2C_CCR_CCR) < 4U)? 4U:((__PCLK__) / ((__SPEED__) << 1U)))
	//i2c->CR1 = 0x00;
	i2c->OAR1 = 0x00 + (1UL<<14);
	i2c->OAR2 = 0x00;
	i2c->CR2 |=  I2C_CR2_ITEVTEN | I2C_CR2_ITBUFEN | I2C_CR2_ITERREN;
	i2c->CR1 |=  I2C_CR1_PE;
	while(!(i2c->CR1 & I2C_CR1_PE)){;}	// odczekanie na koniec resetu I2C

	//#define I2C_RISE_TIME(__FREQRANGE__, __SPEED__)            (((__SPEED__) <= 100000U) ? ((__FREQRANGE__) + 1U) : ((((__FREQRANGE__) * 300U) / 1000U) + 1U))
	//#define I2C_SPEED(__PCLK__, __SPEED__, __DUTYCYCLE__)      (((__SPEED__) <= 100000U)? (I2C_SPEED_STANDARD((__PCLK__), (__SPEED__))) : \
	//                                                                  ((I2C_SPEED_FAST((__PCLK__), (__SPEED__), (__DUTYCYCLE__)) & I2C_CCR_CCR) == 0U)? 1U : \
	//                                                                  ((I2C_SPEED_FAST((__PCLK__), (__SPEED__), (__DUTYCYCLE__))) | I2C_CCR_FS))


}

uint8_t i2cFrameBuffer[20];
Fifo i2cFrame = Fifo(i2cFrameBuffer, 20);

volatile bool i2c_Ongoing  = false;
//volatile bool frameInUse = false;

void i2cEventIrq(){
	I2C_TypeDef * i2c = Hardware::i2c;
	uint32_t sr1 = i2c->SR1;
	if (sr1 & I2C_SR1_TXE){
		if (i2cFrame.isEmpty()){
			i2c->CR1 |= I2C_CR1_STOP;
			i2c_Ongoing = false;
		}else{
			i2c->DR = i2cFrame.get();
		}
	}else if (sr1 & I2C_SR1_ADDR){
		uint32_t sr2 = i2c->SR2;
		//		UNUSED(sr2);
		(void)(sr2 == sr2);
	}else if (sr1 & I2C_SR1_SB){
		i2c->DR = slaveAdr << 1;
	}
}

void i2cErrorIrq(){
	static uint32_t err = 0;
	err++;
}

bool i2cGetBusyFlag(){
	I2C_TypeDef * i2c = Hardware::i2c;
	return i2c->SR2 & I2C_SR2_BUSY;
}


void I2C_stm32F411::i2cTimerJob(){

	static uint32_t timeStamp;
	if (QuickTask::getTimeIntervalMilis(timeStamp) < 4) return;  // 4 ms odstepu do poprzedniej transmisji/ komendy

	if (QuickTask::getTimeIntervalMilis(timeStamp) > 1000){  // jesli powyzej sekundy to timeStamp
		if (i2c->SR2 & I2C_SR2_BUSY){ // jesli tak dlugo busy, to reset I2C
			i2c->CR1 |= I2C_CR1_SWRST;
//			i2c->CR1 &= ~I2C_CR1_PE;
//			while(i2c->CR1 & I2C_CR1_PE){;}	// odczekanie na koniec resetu I2C
//			i2c->CR1 |= I2C_CR1_PE;
//			while(!(i2c->CR1 & I2C_CR1_PE)){;};	// odczekanie na koniec resetu I2C
		}
		i2c_Ongoing = false;
	}

	if (i2c_Ongoing) return;
	if (i2cGetBusyFlag()){
		/* Generate Stop */
		        SET_BIT(i2c->CR1,I2C_CR1_STOP);
	}

	while (i2cFifo.get() !=  I2C_BLOCK_START){
		if (i2cFifo.isEmpty()) return;
	}
	uint8_t amount = i2cFifo.get();
	uint8_t buff[20];
	for (uint8_t i = 0; i < amount; i++){
		if (i >= 20) break;
		buff[i] = (i2cFifo.get());
	}
	timeStamp = QuickTask::getCounter();
	i2c_Ongoing = true;
	i2c->CR1 |= I2C_CR1_START;
	//HAL_I2C_Master_Transmit_IT(i2c, slaveAdr << 1, buff, amount);

}

bool I2C_stm32F411::i2cMasterTransmit(uint16_t slaveAdres, uint8_t * buffer, uint16_t amount){
	slaveAdr = slaveAdres;
	if (i2cFifo.isFull()) return false;
	i2cFifo.put(I2C_BLOCK_START);
	i2cFifo.put(amount);
	for (uint32_t i = 0; i < amount; i++){
		if (i2cFifo.isFull()) return false;
		i2cFifo.put(buffer[i]);
	}
	i2cTimerJob();
	return true;
}

bool I2C_stm32F411::i2cMasterTransmit(uint16_t slaveAdres, uint8_t * buffer, uint16_t amount, uint32_t timeout)
{
	//return (HAL_StatusTypeDef::HAL_OK == HAL_I2C_Master_Transmit(i2c, slaveAdres << 1, buffer, amount, timeout));
}

void DMA1_Stream0_IRQHandler(void){
	static volatile uint32_t dmairq = 1;
	dmairq++;
}

void ADC_IRQHandler(void){
	static volatile uint32_t adcirq = 1;
	adcirq++;
}

void I2C1_EV_IRQHandler(void){
	static volatile uint32_t i2cev = 1;
	i2cev++;
	i2cEventIrq();
}

void I2C1_ER_IRQHandler(void){
	static volatile uint32_t i2cer = 1;
	i2cer++;
	i2cErrorIrq();
}

